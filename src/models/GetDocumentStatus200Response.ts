/* tslint:disable */
/* eslint-disable */
/**
 * DeepL API Documentation
 * The DeepL API provides programmatic access to DeepLâ€™s machine translation technology.
 *
 * The version of the OpenAPI document: 2.9.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GetDocumentStatus200Response
 */
export interface GetDocumentStatus200Response {
    /**
     * A unique ID assigned to the uploaded document and the requested translation process. The same ID that was used when requesting the translation status.
     * @type {string}
     * @memberof GetDocumentStatus200Response
     */
    documentId: string;
    /**
     * A short description of the state the document translation process is currently in. Possible values are:
     *  * `queued` - the translation job is waiting in line to be processed
     *  * `translating` - the translation is currently ongoing
     *  * `done` - the translation is done and the translated document is ready for download
     *  * `error` - an irrecoverable error occurred while translating the document
     * @type {string}
     * @memberof GetDocumentStatus200Response
     */
    status: GetDocumentStatus200ResponseStatusEnum;
    /**
     * Estimated number of seconds until the translation is done.
     * This parameter is only included while `status` is `"translating"`.
     * @type {number}
     * @memberof GetDocumentStatus200Response
     */
    secondsRemaining?: number;
    /**
     * The number of characters billed to your account. The characters will only be billed after a successful download request.
     * @type {number}
     * @memberof GetDocumentStatus200Response
     */
    billedCharacters?: number;
    /**
     * A short description of the error, if available.
     * Note that the content is subject to change.
     * This parameter may be included if an error occurred during translation.
     * @type {string}
     * @memberof GetDocumentStatus200Response
     */
    errorMessage?: string;
}


/**
 * @export
 */
export const GetDocumentStatus200ResponseStatusEnum = {
    Queued: 'queued',
    Translating: 'translating',
    Done: 'done',
    Error: 'error'
} as const;
export type GetDocumentStatus200ResponseStatusEnum = typeof GetDocumentStatus200ResponseStatusEnum[keyof typeof GetDocumentStatus200ResponseStatusEnum];


/**
 * Check if a given object implements the GetDocumentStatus200Response interface.
 */
export function instanceOfGetDocumentStatus200Response(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "documentId" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function GetDocumentStatus200ResponseFromJSON(json: any): GetDocumentStatus200Response {
    return GetDocumentStatus200ResponseFromJSONTyped(json, false);
}

export function GetDocumentStatus200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetDocumentStatus200Response {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'documentId': json['document_id'],
        'status': json['status'],
        'secondsRemaining': !exists(json, 'seconds_remaining') ? undefined : json['seconds_remaining'],
        'billedCharacters': !exists(json, 'billed_characters') ? undefined : json['billed_characters'],
        'errorMessage': !exists(json, 'error_message') ? undefined : json['error_message'],
    };
}

export function GetDocumentStatus200ResponseToJSON(value?: GetDocumentStatus200Response | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'document_id': value.documentId,
        'status': value.status,
        'seconds_remaining': value.secondsRemaining,
        'billed_characters': value.billedCharacters,
        'error_message': value.errorMessage,
    };
}

