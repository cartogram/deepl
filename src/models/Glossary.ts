/* tslint:disable */
/* eslint-disable */
/**
 * DeepL API Documentation
 * The DeepL API provides programmatic access to DeepLâ€™s machine translation technology.
 *
 * The version of the OpenAPI document: 2.9.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {exists, mapValues} from '../runtime'
import type {GlossarySourceLanguage} from './GlossarySourceLanguage'
import {
  GlossarySourceLanguageFromJSON,
  GlossarySourceLanguageFromJSONTyped,
  GlossarySourceLanguageToJSON,
} from './GlossarySourceLanguage'
import type {GlossaryTargetLanguage} from './GlossaryTargetLanguage'
import {
  GlossaryTargetLanguageFromJSON,
  GlossaryTargetLanguageFromJSONTyped,
  GlossaryTargetLanguageToJSON,
} from './GlossaryTargetLanguage'

/**
 *
 * @export
 * @interface Glossary
 */
export interface Glossary {
  /**
   * A unique ID assigned to a glossary.
   * @type {string}
   * @memberof Glossary
   */
  glossaryId?: string
  /**
   * Name associated with the glossary.
   * @type {string}
   * @memberof Glossary
   */
  name?: string
  /**
   * Indicates if the newly created glossary can already be used in `translate` requests.
   * If the created glossary is not yet ready, you have to wait and check the `ready` status
   * of the glossary before using it in a `translate` request.
   * @type {boolean}
   * @memberof Glossary
   */
  ready?: boolean
  /**
   *
   * @type {GlossarySourceLanguage}
   * @memberof Glossary
   */
  sourceLang?: GlossarySourceLanguage
  /**
   *
   * @type {GlossaryTargetLanguage}
   * @memberof Glossary
   */
  targetLang?: GlossaryTargetLanguage
  /**
   * The creation time of the glossary in the ISO 8601-1:2019 format (e.g.: `2021-08-03T14:16:18.329Z`).
   * @type {Date}
   * @memberof Glossary
   */
  creationTime?: Date
  /**
   * The number of entries in the glossary.
   * @type {number}
   * @memberof Glossary
   */
  entryCount?: number
}

/**
 * Check if a given object implements the Glossary interface.
 */
export function instanceOfGlossary(value: object): boolean {
  let isInstance = true

  return isInstance
}

export function GlossaryFromJSON(json: any): Glossary {
  return GlossaryFromJSONTyped(json, false)
}

export function GlossaryFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Glossary {
  if (json === undefined || json === null) {
    return json
  }
  return {
    glossaryId: !exists(json, 'glossary_id') ? undefined : json['glossary_id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    ready: !exists(json, 'ready') ? undefined : json['ready'],
    sourceLang: !exists(json, 'source_lang')
      ? undefined
      : GlossarySourceLanguageFromJSON(json['source_lang']),
    targetLang: !exists(json, 'target_lang')
      ? undefined
      : GlossaryTargetLanguageFromJSON(json['target_lang']),
    creationTime: !exists(json, 'creation_time')
      ? undefined
      : new Date(json['creation_time']),
    entryCount: !exists(json, 'entry_count') ? undefined : json['entry_count'],
  }
}

export function GlossaryToJSON(value?: Glossary | null): any {
  if (value === undefined) {
    return undefined
  }
  if (value === null) {
    return null
  }
  return {
    glossary_id: value.glossaryId,
    name: value.name,
    ready: value.ready,
    source_lang: GlossarySourceLanguageToJSON(value.sourceLang),
    target_lang: GlossaryTargetLanguageToJSON(value.targetLang),
    creation_time:
      value.creationTime === undefined
        ? undefined
        : value.creationTime.toISOString(),
    entry_count: value.entryCount,
  }
}
