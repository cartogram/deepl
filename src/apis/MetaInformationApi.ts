/* tslint:disable */
/* eslint-disable */
/**
 * DeepL API Documentation
 * The DeepL API provides programmatic access to DeepL’s machine translation technology.
 *
 * The version of the OpenAPI document: 2.9.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {GetLanguages200ResponseInner, GetUsage200Response} from '../models'
import {
  GetLanguages200ResponseInnerFromJSON,
  GetLanguages200ResponseInnerToJSON,
  GetUsage200ResponseFromJSON,
  GetUsage200ResponseToJSON,
} from '../models'

export interface GetLanguagesRequest {
  type?: GetLanguagesTypeEnum
}

/**
 *
 */
export class MetaInformationApi extends runtime.BaseAPI {
  /**
   * Retrieve the list of languages that are currently supported for translation, either as source or target language, respectively.
   * Retrieve Supported Languages
   */
  async getLanguagesRaw(
    requestParameters: GetLanguagesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<GetLanguages200ResponseInner>>> {
    const queryParameters: any = {}

    if (requestParameters.type !== undefined) {
      queryParameters['type'] = requestParameters.type
    }

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // auth_header authentication
    }

    const response = await this.request(
      {
        path: `/languages`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GetLanguages200ResponseInnerFromJSON),
    )
  }

  /**
   * Retrieve the list of languages that are currently supported for translation, either as source or target language, respectively.
   * Retrieve Supported Languages
   */
  async getLanguages(
    requestParameters: GetLanguagesRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<GetLanguages200ResponseInner>> {
    const response = await this.getLanguagesRaw(
      requestParameters,
      initOverrides,
    )
    return await response.value()
  }

  /**
   * Retrieve usage information within the current billing period together with the corresponding account limits. Usage is returned for: - translated characters - translated documents - translated documents, team totals (for team accounts only)  Character usage includes both text and document translations, and is measured by the source text length in Unicode code points, so for example \"A\", \"Δ\", \"あ\", and \"深\" are each counted as a single character.  Document usage only includes document translations, and is measured in individual documents.  Depending on the user account type, some usage types will be omitted. Character usage is only included for developer accounts. Document usage is only included for non-developer accounts, and team-combined document usage is only included for non-developer team accounts.
   * Check Usage and Limits
   */
  async getUsageRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GetUsage200Response>> {
    const queryParameters: any = {}

    const headerParameters: runtime.HTTPHeaders = {}

    if (this.configuration && this.configuration.apiKey) {
      headerParameters['Authorization'] =
        this.configuration.apiKey('Authorization') // auth_header authentication
    }

    const response = await this.request(
      {
        path: `/usage`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    )

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetUsage200ResponseFromJSON(jsonValue),
    )
  }

  /**
   * Retrieve usage information within the current billing period together with the corresponding account limits. Usage is returned for: - translated characters - translated documents - translated documents, team totals (for team accounts only)  Character usage includes both text and document translations, and is measured by the source text length in Unicode code points, so for example \"A\", \"Δ\", \"あ\", and \"深\" are each counted as a single character.  Document usage only includes document translations, and is measured in individual documents.  Depending on the user account type, some usage types will be omitted. Character usage is only included for developer accounts. Document usage is only included for non-developer accounts, and team-combined document usage is only included for non-developer team accounts.
   * Check Usage and Limits
   */
  async getUsage(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GetUsage200Response> {
    const response = await this.getUsageRaw(initOverrides)
    return await response.value()
  }
}

/**
 * @export
 */
export const GetLanguagesTypeEnum = {
  Source: 'source',
  Target: 'target',
} as const
export type GetLanguagesTypeEnum =
  (typeof GetLanguagesTypeEnum)[keyof typeof GetLanguagesTypeEnum]
